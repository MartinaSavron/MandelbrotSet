import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class MandelbrotExplorer extends JFrame {

    //The Mandelbrot set is generated by what is called iteration,
    // which means to repeat a process over and over again.
    // In mathematics this process is most often the application of a mathematical function
    private static final int ITER = 50;//Iteracije

    private static final double ZOOM_SENSITYVITY = 1;

    //Koordinatni
    private double rStart = -5;
    private double iStart = -5;
    private double rEnd = 5;
    private double iEnd = 5;


    class MandelbrotPanel extends JPanel{
        private boolean mouseDown = false;

        private int lastMouseX = -1;
        private int lastMouseY = -1;

        public MandelbrotPanel(){
            /*this.addMouseListener(new MouseAdapter() {

                @Override
                public void mousePressed(MouseEvent e) {
                    mouseDown = true;
                    lastMouseX = e.getX();
                    lastMouseY = e.getY();
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    mouseDown = false;
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    mouseDown = true;
                }
            });*/
            //PREMIK PO CANVASU
            this.addMouseMotionListener(new MouseMotionListener() {
                @Override
                public void mouseDragged(MouseEvent e) {
                    double diffX = ((rEnd - rStart) / getWidth()) * (lastMouseX - e.getX());
                    rStart += diffX;
                    rEnd += diffX;

                    double diffY = ((iEnd - iStart) / getHeight()) * (lastMouseY - e.getY());
                    iStart += diffY;
                    iEnd += diffY;

                    lastMouseX = e.getX();
                    lastMouseY = e.getY();
                    repaint();

                }

                @Override
                public void mouseMoved(MouseEvent e) {
                    lastMouseX = e.getX();
                    lastMouseY = e.getY();
                }
            });
            //ZOOM:
            this.addMouseWheelListener(e -> {
                //System.out.println(e.getUnitsToScroll());
                double zoom = ZOOM_SENSITYVITY / e.getUnitsToScroll();

                //Za X os:
                double rSize = rEnd - rStart;
                double rCenter = (rEnd + rStart) / 2;
                rSize = rSize * (1 + zoom);
                rStart = rCenter - (rSize / 2);
                rEnd = rCenter + (rSize / 2);
                //Za Y os:
                double iSize = iEnd - iStart;
                double iCenter = (iEnd + iStart) / 2;
                iSize = iSize * (1 + zoom);
                iStart = iCenter - (iSize / 2);
                iEnd = iCenter + (iSize / 2);

                repaint();
            });
        }

        public void paint(Graphics g) {
            drawMandelbrotSet(this, g);
        }

    }



    public MandelbrotExplorer() {
        this.setSize(800, 800); //Dimenzija okna
        this.setLocation(0,0); //Pojavi na sredini
        this.setVisible(true);
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e){
                System.exit(0);
            }
        });
        this.add(new MandelbrotPanel());
    }

    public static void main(String[] args) {
        new MandelbrotExplorer();
    }

    //Risanje pixlow
    public void drawMandelbrotSet(JPanel panel, Graphics g){
        Color b;

        int nImageWidth = 100;//panel.getWidth(); //Ločljivost ter odzivnost*
        int nImageHeight = 100;//panel.getHeight();

        double pixelSizeX = (double)panel.getWidth()/nImageWidth;
        double pixelSizeY = (double)panel.getHeight()/nImageHeight;

        double rStep = (rEnd-rStart)/nImageWidth;
        double iStep = (iEnd-iStart)/nImageHeight;

        for (int x = 0; x < nImageWidth; x++) {
            for (int y = 0; y < nImageHeight; y++) {
                b = null;
                double r = 0;
                double i = 0;
                for (int a = 0; a < ITER; a++) {
                    double res = r*r;
                    res = res - (i*i);
                    double resi = 2*(r*i);
                    r=res;
                    i=resi;
                    r=r+(rStart+(rStep*x));//element vodoravno
                    i=i+(iStart+(iStep*y));//element navpično
                    double dist = (double) Math.sqrt((r*r)+(i*i));
                    if (dist > 2){
                        int greyScale = (int)(a*(((double)255)/ITER));
                        System.out.println(greyScale);
                        b = new Color(greyScale,greyScale,greyScale);
                        break;
                    }

                }
                if (b == null){
                    b = Color.BLACK;//Ozadje
                }
                g.setColor(b);
                g.fillRect((int)(x*pixelSizeX), (int)(y*pixelSizeY),(int)pixelSizeX+1, (int)pixelSizeY+1);

            }

        }

    }





}
